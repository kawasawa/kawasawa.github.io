# Generated by GitHub Copilot

import pickle
from pathlib import Path
from typing import List, Optional

import numpy as np
from config import VectorSearchConfig
from entities import KnowledgeEntity, VectorCache
from logger import mcp_logger


class VectorCacheManager:
    """
    ベクトルデータのキャッシュ管理を行うクラス
    """

    def __init__(self, workspace_root: Path):
        """
        キャッシュマネージャーの初期化
        Args:
            workspace_root (Path): ワークスペースのルートパス
        """
        knowledge_dir = workspace_root / "mcp" / "knowledge"
        self.cache_file_path = knowledge_dir / VectorSearchConfig.CACHE_FILE_NAME

    def should_use_cache(self, current_knowledge: List[KnowledgeEntity]) -> bool:
        """
        キャッシュを使用すべきかどうかを判定
        Args:
            current_knowledge (List[KnowledgeEntity]): 現在のナレッジリスト
        Returns:
            bool: キャッシュを使用する場合True
        """
        # キャッシュファイルが存在しない場合は使用不可
        if not self.cache_file_path.exists():
            return False

        # キャッシュ内のデータ数と異なるかどうかで判断
        try:
            with open(self.cache_file_path, "rb") as f:
                cached_data = pickle.load(f)
                return len(cached_data.get("knowledge_list", [])) == len(
                    current_knowledge
                )
        except Exception:
            return False

    def load_from_cache(self) -> Optional[VectorCache]:
        """
        キャッシュからベクトルデータを読み込み
        Returns:
            Optional[VectorCache]: キャッシュデータ（失敗時はNone）
        """
        try:
            with open(self.cache_file_path, "rb") as f:
                data = pickle.load(f)
                mcp_logger.info("キャッシュを読み込みました")
        except Exception as e:
            mcp_logger.error(f"キャッシュの読み込みに失敗: {e}")
            return None

        knowledge_list = []
        for dict in data["knowledge_list"]:
            entity = KnowledgeEntity(
                file_path=dict["file_path"],
                line_number=dict["line_number"],
                content=dict["content"],
                full_line=dict["full_line"],
                file_extension=dict["file_extension"],
            )
            knowledge_list.append(entity)
        return VectorCache(
            knowledge_list=knowledge_list,
            vectors=data["vectors"] if "vectors" in data else np.array([]),
        )

    def save_to_cache(self, data: VectorCache) -> bool:
        """
        ベクトルデータをキャッシュに保存
        Args:
            data (VectorCache): キャッシュに保存するデータ
        Returns:
            bool: 保存が成功した場合True
        """

        knowledge_as_dicts = []
        for knowledge in data.knowledge_list:
            dict = {
                "file_path": knowledge.file_path,
                "line_number": knowledge.line_number,
                "content": knowledge.content,
                "full_line": knowledge.full_line,
                "file_extension": knowledge.file_extension,
            }
            knowledge_as_dicts.append(dict)

        try:
            cache_data = {
                "knowledge_list": knowledge_as_dicts,
                "vectors": data.vectors,
            }
            with open(self.cache_file_path, "wb") as f:
                pickle.dump(cache_data, f)
                mcp_logger.info("キャッシュを保存しました")
                return True
        except Exception as e:
            mcp_logger.error(f"キャッシュの保存に失敗: {e}")
            return False

    def clear_cache(self) -> None:
        """
        キャッシュファイルを削除
        """
        if self.cache_file_path.exists():
            self.cache_file_path.unlink()
            mcp_logger.info("キャッシュファイルを削除しました")
